<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="10" skipped="1" tests="47" time="2.629" timestamp="2025-08-10T15:17:43.831973+02:00" hostname="test-OptiPlex-3040"><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_health_endpoint" time="0.048" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_health_endpoint_with_ai_agents" time="0.003" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_providers_endpoint_get" time="0.002" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_providers_endpoint_structure_validation" time="0.002" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_update_provider_success" time="0.003" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_update_provider_nonexistent" time="0.002" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_update_provider_invalid_data" time="0.002" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_settings_get" time="0.002" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_settings_update" time="0.002" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_settings_partial_update" time="0.003" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_chat_success" time="0.009" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_chat_with_model_selection" time="0.008" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_chat_missing_message" time="0.002" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_chat_disabled_provider" time="0.002" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_chat_with_fallback" time="0.008"><failure message="assert 400 == 200&#10; +  where 400 = &lt;WrapperTestResponse streamed [400 BAD REQUEST]&gt;.status_code">tests/test_comprehensive_backend.py:428: in test_chat_with_fallback
    assert response.status_code == 200
E   assert 400 == 200
E    +  where 400 = &lt;WrapperTestResponse streamed [400 BAD REQUEST]&gt;.status_code</failure></testcase><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_chat_compare_multiple_providers" time="0.012"><failure message="AssertionError: assert 1 == 2&#10; +  where 1 = len([{'model': 'gpt-4o', 'provider': 'openai', 'response': 'Test AI response for unit testing', 'response_time': 0.00011396408081054688, ...}])">tests/test_comprehensive_backend.py:448: in test_chat_compare_multiple_providers
    assert len(data) == 2
E   AssertionError: assert 1 == 2
E    +  where 1 = len([{'model': 'gpt-4o', 'provider': 'openai', 'response': 'Test AI response for unit testing', 'response_time': 0.00011396408081054688, ...}])</failure></testcase><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_test_provider_success" time="0.061"><failure message="assert 400 == 200&#10; +  where 400 = &lt;WrapperTestResponse streamed [400 BAD REQUEST]&gt;.status_code">tests/test_comprehensive_backend.py:464: in test_test_provider_success
    assert response.status_code == 200
E   assert 400 == 200
E    +  where 400 = &lt;WrapperTestResponse streamed [400 BAD REQUEST]&gt;.status_code</failure></testcase><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_test_provider_failure" time="0.015"><failure message="assert 400 == 200&#10; +  where 400 = &lt;WrapperTestResponse streamed [400 BAD REQUEST]&gt;.status_code">tests/test_comprehensive_backend.py:482: in test_test_provider_failure
    assert response.status_code == 200
E   assert 400 == 200
E    +  where 400 = &lt;WrapperTestResponse streamed [400 BAD REQUEST]&gt;.status_code</failure></testcase><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_test_all_providers" time="0.048" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_enhanced_provider_test" time="0.013"><failure message="assert 400 == 200&#10; +  where 400 = &lt;WrapperTestResponse streamed [400 BAD REQUEST]&gt;.status_code">tests/test_comprehensive_backend.py:513: in test_enhanced_provider_test
    assert response.status_code == 200
E   assert 400 == 200
E    +  where 400 = &lt;WrapperTestResponse streamed [400 BAD REQUEST]&gt;.status_code</failure></testcase><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_list_devices" time="0.002" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_add_device_success" time="0.012" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_add_device_missing_required_field" time="0.004" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_add_device_duplicate_id" time="0.008" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_update_device_success" time="0.021" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_update_device_nonexistent" time="0.002" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_remove_device_success" time="0.002" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_remove_device_nonexistent" time="0.007" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_device_connection_test_success" time="0.014" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_device_connection_test_failure" time="0.018" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_send_device_command_success" time="0.001"><skipped type="pytest.skip" message="send_command_to_router function not implemented">/home/test/Documents/CHAT_4545u_test/multi-api-chat/tests/test_comprehensive_backend.py:664: send_command_to_router function not implemented</skipped></testcase><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_send_device_command_missing_command" time="0.002" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_send_device_command_nonexistent_device" time="0.002" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_usage_endpoint_empty" time="0.002" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_usage_tracking" time="0.002" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_usage_multiple_requests_tracking" time="0.003" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_ollama_provider_configuration" time="0.002" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_ollama_models_endpoint_success" time="0.006" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_ollama_models_endpoint_failure" time="0.010" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_ollama_pull_model_success" time="0.010" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_ai_agents_status_endpoint" time="0.003"><failure message="AssertionError: assert 'ai_available' in {'available': True, 'status': {'agent_status': {'master_agent': {'average_response_time': 0, 'last_activity': None, 'status': 'active', 'tasks_completed_today': 0, ...}, 'performance_metrics': {'average_agents_per_task': 1, 'complexity_distribution': {'complex': 0, 'moderate': 0, 'simple': 0}, 'success_rate': 100}, 'specialized_agents': {'analytics_agent': {'capabilities': ['data_analysis', 'metrics', 'reporting', 'insights'], 'role': 'Analytics Agent', 'status': 'active'}, 'automation_agent': {'capabilities': ['workflow_automation', 'process_optimization', 'scheduling'], 'role': 'Automation Agent', 'status': 'active'}, 'chat_agent': {'capabilities': ['conversation', 'general_queries', 'user_interaction'], 'role': 'Chat Agent', 'status': 'active'}, 'device_agent': {'capabilities': ['device_management', 'iot', 'monitoring', 'configuration'], 'role': 'Device Agent', 'status': 'active'}, ...}, 'system_status': {'demo_mode': True, 'enabled': True, 'total_agents': 6}}, 'enabled': True, 'status': 'active'}}">tests/test_comprehensive_backend.py:822: in test_ai_agents_status_endpoint
    assert "ai_available" in data
E   AssertionError: assert 'ai_available' in {'available': True, 'status': {'agent_status': {'master_agent': {'average_response_time': 0, 'last_activity': None, 'status': 'active', 'tasks_completed_today': 0, ...}, 'performance_metrics': {'average_agents_per_task': 1, 'complexity_distribution': {'complex': 0, 'moderate': 0, 'simple': 0}, 'success_rate': 100}, 'specialized_agents': {'analytics_agent': {'capabilities': ['data_analysis', 'metrics', 'reporting', 'insights'], 'role': 'Analytics Agent', 'status': 'active'}, 'automation_agent': {'capabilities': ['workflow_automation', 'process_optimization', 'scheduling'], 'role': 'Automation Agent', 'status': 'active'}, 'chat_agent': {'capabilities': ['conversation', 'general_queries', 'user_interaction'], 'role': 'Chat Agent', 'status': 'active'}, 'device_agent': {'capabilities': ['device_management', 'iot', 'monitoring', 'configuration'], 'role': 'Device Agent', 'status': 'active'}, ...}, 'system_status': {'demo_mode': True, 'enabled': True, 'total_agents': 6}}, 'enabled': True, 'status': 'active'}}</failure></testcase><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_ai_chat_request" time="0.003" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_ai_analytics_request" time="0.003"><failure message="assert 400 == 200&#10; +  where 400 = &lt;WrapperTestResponse streamed [400 BAD REQUEST]&gt;.status_code">tests/test_comprehensive_backend.py:872: in test_ai_analytics_request
    assert response.status_code == 200
E   assert 400 == 200
E    +  where 400 = &lt;WrapperTestResponse streamed [400 BAD REQUEST]&gt;.status_code</failure></testcase><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_ai_requests_when_unavailable" time="0.002" /><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_workflow_create" time="0.003"><failure message="assert 404 == 200&#10; +  where 404 = &lt;WrapperTestResponse streamed [404 NOT FOUND]&gt;.status_code">tests/test_comprehensive_backend.py:914: in test_workflow_create
    assert response.status_code == 200
E   assert 404 == 200
E    +  where 404 = &lt;WrapperTestResponse streamed [404 NOT FOUND]&gt;.status_code</failure></testcase><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_workflow_execute" time="0.004"><failure message="json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)">tests/test_comprehensive_backend.py:930: in test_workflow_execute
    workflow_id = json.loads(create_response.data)["workflow_id"]
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.11/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.11/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.11/json/decoder.py:355: in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</failure></testcase><testcase classname="tests.test_comprehensive_backend.TestBackendServer" name="test_workflow_status" time="0.006"><failure message="json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)">tests/test_comprehensive_backend.py:949: in test_workflow_status
    workflow_id = json.loads(create_response.data)["workflow_id"]
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.11/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.11/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
/usr/lib/python3.11/json/decoder.py:355: in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
E   json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)</failure></testcase></testsuite></testsuites>