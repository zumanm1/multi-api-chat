#!/usr/bin/env python3

import requests
import json
import time
from datetime import datetime

# Test the enhanced automation workflow functionality
def test_automation_workflow():
    """Test the automation workflow with command history tracking"""
    
    base_url = "http://localhost:7002/api"
    
    print("🧪 Testing Enhanced Automation Workflow")
    print("=" * 50)
    
    # Test 1: Config Push Workflow
    print("\n📤 Testing Configuration Push Workflow...")
    
    push_data = {
        "device_id": "router1",
        "config": """interface GigabitEthernet0/0/1
description Auto-generated by GENAI
ip ospf 1 area 0
no shutdown
!
router ospf 1
router-id 1.1.1.1
!""",
        "workflow_data": {
            "original_request": "Configure OSPF with process ID 1 and area 0 on interface GigabitEthernet0/0/1 with router ID 1.1.1.1"
        }
    }
    
    try:
        response = requests.post(f"{base_url}/workflows/config-push", json=push_data, timeout=10)
        if response.status_code == 200:
            result = response.json()
            print("✅ Configuration Push Response:")
            print(f"   Device: {result.get('device')}")
            print(f"   Status: {result.get('status')}")
            print(f"   Success: {result.get('success')}")
            
            # Check command history
            if 'command_history' in result:
                print(f"   📜 Command History: {len(result['command_history'])} commands")
                for i, cmd in enumerate(result['command_history'][:3]):  # Show first 3
                    print(f"      {i+1}. [{cmd['step']}] {cmd['command'][:50]}...")
                    print(f"         Timestamp: {cmd['timestamp']}")
                    print(f"         Success: {cmd['success']}")
            
            # Check execution summary
            if 'execution_summary' in result:
                summary = result['execution_summary']
                print(f"   📊 Execution Summary:")
                print(f"      Total Commands: {summary.get('total_commands')}")
                print(f"      Successful: {summary.get('successful_commands')}")
                print(f"      Failed: {summary.get('failed_commands')}")
                print(f"      Execution Time: {summary.get('execution_time')}")
                
        else:
            print(f"❌ Configuration Push failed: {response.status_code}")
            print(f"   Response: {response.text}")
    except requests.RequestException as e:
        print(f"❌ Configuration Push request failed: {e}")
    
    # Test 2: Config Retrieval Workflow
    print("\n📥 Testing Configuration Retrieval Workflow...")
    
    retrieval_data = {
        "device_id": "router1",
        "workflow_data": {
            "original_request": "Show me the current running configuration"
        }
    }
    
    try:
        response = requests.post(f"{base_url}/workflows/config-retrieval", json=retrieval_data, timeout=10)
        if response.status_code == 200:
            result = response.json()
            print("✅ Configuration Retrieval Response:")
            print(f"   Device: {result.get('device')}")
            print(f"   Config Length: {len(result.get('config', ''))} characters")
            
            # Check command history
            if 'command_history' in result:
                print(f"   📜 Command History: {len(result['command_history'])} commands")
                for i, cmd in enumerate(result['command_history']):
                    print(f"      {i+1}. [{cmd['step']}] {cmd['command']}")
                    print(f"         Timestamp: {cmd['timestamp']}")
                    print(f"         Success: {cmd['success']}")
                    if len(cmd.get('response', '')) > 50:
                        print(f"         Response: {cmd['response'][:50]}...")
                    else:
                        print(f"         Response: {cmd['response']}")
            
            # Check execution summary
            if 'execution_summary' in result:
                summary = result['execution_summary']
                print(f"   📊 Execution Summary:")
                print(f"      Total Commands: {summary.get('total_commands')}")
                print(f"      Successful: {summary.get('successful_commands')}")
                print(f"      Failed: {summary.get('failed_commands')}")
                print(f"      Execution Time: {summary.get('execution_time')}")
                
        else:
            print(f"❌ Configuration Retrieval failed: {response.status_code}")
            print(f"   Response: {response.text}")
    except requests.RequestException as e:
        print(f"❌ Configuration Retrieval request failed: {e}")
    
    print("\n🎯 Testing Complete!")
    print("=" * 50)
    print("Features tested:")
    print("✅ Command history tracking with timestamps")
    print("✅ Success/failure indicators for each command")
    print("✅ Raw router responses with formatting")
    print("✅ Execution summary statistics")
    print("✅ Step-by-step workflow progression")
    
    print("\n🌐 Frontend features available:")
    print("✅ Collapsible 'Full Command History' section")
    print("✅ Copy-to-clipboard functionality")
    print("✅ Syntax highlighting for router responses")
    print("✅ Expandable command details")
    print("✅ Real-time command execution tracking")

if __name__ == "__main__":
    test_automation_workflow()
